Git Mindset
Hashing -> function that takes an input if arbitrary size and produces output of fixed size
Hash collision -> when a number of different inputs produce same output
SHA-256 -> a hashing function royalty free with very low odds for collision and fast

Blob -> Binary Large OBject

GitBash
Vim
    name.txt -> create a new file from GitBash
    :wq - save and exit
    :qa - exit without saving  (QuitAll)

cat name.txt => print contents of the file to console | stand for concatenate
diff -u A.txt B.txt => show the differance between two files -u stands for Unified format
diff -u A.txt B.txt > fileName => dump the output of the diff into a file
patch A.txt mychange => patch a file where mychange is a file produced by diff
    (add changes from the difference to file A)

pwd => present working directory
ls -l => list long format -> show contents of a directory with details

touch => change file access and modification times | if a file doesn't exist it is created
files starting with '.' like .hidden are hidden
ls -a shows all files including hidden ones
we can combine flags , instead of ls -l -a we can just write ls -la
ls -alR => R will list recursively
. current directory
.. parent directory

echo => send anything as standard output
echo some text > filename => will set the contents of a file to the output of echo
echo more text >> filename => will append
| is a pipe operator, it takes standard output of a preceding command and passes it as standard input
    to the following command
> operator is a shortcut for '| tee'
i.e echo some text | tee file => pipe operator will take standard output of the echo and pass it as standard input
    to the tee command

tee => utility that copies standard input to standard output, making a copy in zero or more files
find . show directory structure from current directory

rm -rf => rm remove r recursive f force - will not ask for confirmation ! Warning be very careful will rf !

The folder where we set up a project is called 'Project working directory' aka working tree
    inside of it will be created .git directory and that is the repository where all versions are kept

git status
git add <filename>
git commit
git config --global --list show configured user and email
git show
git commit -m "add commit message as part of the command" => no need to go thru text editor
git show "HEAD:readme.txt" show contents of a file
git show "HEAD:" show commit tree
git log => shows all commits from HEAD to master
git help command or git command --help => documentation for any command
git add -A => stage all changes

git add => adds files from the working tree to a staging area
Staging Area = the Index = the Cache => the commit to be

git reset => move the head to earlier commit
git reset --soft => moves the head but doesn't change any of the files in the working tree (uncommits changes)
git reset --hard => moves the head and restores the files to the point of reset (discards any changes that were made
    after the moved to commit)

After a soft reset the changes since the reset to commit will be staged
git restore --staged * => will unstage all changes (* stands for all)

git add -interactive || git add -i => we can choose parts of the changes to stage from one file

git checkout <branch> => switch to a branch - restore files in the working tree

DAG => directional acyclic graph

HEAD => The HEAD in Git is the pointer to the current branch reference,
        which is in turn a pointer to the last commit you made or the last commit that was checked out
        into your working directory. That also means it will be the parent of the next commit you do.
HEAD points to the current branch
Git HEAD is a pointer to the local branch you're currently on (like master[main])
HEAD always refers to the most recent commit on the current branch. When you change branches, HEAD is updated
        to refer to the new branchâ€™s latest commit.
HEAD is a parent of the next commit

Detached HEAD => means that it is not attached to any branch, i.e. it points directly to some commit. In other words:
                If it points to a commit directly, the HEAD is detached.
Branch => represents the tip of a series of commits - it's not a container for commits.

git branch => shows the list of all branches the * show what branch the head file points to
git branch <name> => creates a new branch but does not move the HEAD
git checkout <nameOfBranch> moves the HEAD to the branch
git branch --delete <name> => delete branch -> cannot delete checked out branch
git checkout -b <name> => create a new branch and checkout
git switch -c <name> => same as checkout | it's a new command that is experimental at this time

git commit -am <message> creates a new commit and adds all unstaged changes

git log <branchName> <branchName> <branchName> => will log all the branches put as parameters no lineage of commits
git log -- graph <branchName> <branchName> <branchName> same but shows commit tree
git log --graph --all => list all branches
git log -- <fileName> => show commits for a specific file
git log --patch -- <fileName> => also shows the changes made to the files
git log -G "word appearing in the commit" -- <fileName> => search commit for a specific word in a specific file

MERGE
Fast forward => if master branch has no changes since the new branch | The master branch will point to the head
    of the new branch that is being merged in to master
git merge <branchName>
git reset --hard <branchName> would achieve the same result

Merge commit AKA Three way merge => when master has changes unreachable by another branch | The new commit will have two parents
    => the commit master was pointing at before merge and the head of the branch merged in to master
    the command is the same git merge <branchName> (HEAD needs to point at master branch)

git merge --abort => in case of a merge conflict the commit will be half committed, we can either resolve the conflict
    manually or abort

Tags => a reference to a commit
semver => semantic versioning
Basics of semver :
major.minor.patch
If the API of the new version is not backwards compatible with the previous version than we increment the major and zero
    out minor and patch 1.2.3 => 2.0.0
If API is backwards compatible and the new version adds functionality than we increment the minor and zero out patch
    => 1.2.3 => 1.3.0
If changes are only bugfixing we increment only patch number 1.2.3 => 1.2.4
-----------------------------------------------------------------------------------------------------------------------
Simple tag cannot store any metadata and points directly to the commit
Annotated Tag can | it still creates a simple tag but the tag is pointing the annotation and the annotation is pointing
    to the commit
git tag <name> => creates a simple tag on the commit that the head is currently pointing at
git tag => show all tags
git tag -d <tagName> => delete tag

git tag -a <tagName> => creates an annotated tag
git show <tagName> => show details of the annotated tag and the commit it's attached to

git clone <directory_to_be_cloned> <destination_directory>
git remote -v => shows the origin name and url

git branch -v => v stands for verbose -> more information
git branch -av => will show all branches including remotes

git config --list => repo details like user and remote url also in .git/config file

git fetch => will download commits, files and refs from the remote in to local repo. It shows the state of the central
    history. It has no effect on the local development.
    It doesn't move local master or head nor does it merge

git pull => works like fetch but it will initiate a merge

We can add to a branch on origin master by creating a local branch with the same name and git will automatically
    track the branch on the origin remote

git push => with no parameters equates to :
git push origin refs/heads/master:refs/heads/master => push to origin remote ref/heads/master our local refs/heads/master
git push --tag => tags are not pushed by default
